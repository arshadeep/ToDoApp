@page "/"
@using Model
@using Newtonsoft.Json  @*helps in serializing the object into Json format*@
@*helps inlocal storage*@
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage 
<div class="todo-container">

<h1>To Do App</h1>
<div class=todo-input>
	<input type="text" @bind="toDoInput"/>
	<button @onclick="AddToDo">Add</button>
</div>
@for(int i=0;i<addedItems.Count;i++)
	{
		var index = i;
		var toDo = addedItems[i];
		<div class="todo-item">
		<div
		class="@(toDo.IsComplete? "todo-item__text complete":"todo-item__text")"
		@onclick="@(()=>MarkAsComplete(toDo))">@toDo.Title
        </div>
		<div class=todo-item__close @onclick="@(() => RemoveToDo(index))">&times;</div>
		</div>
	}
	
</div>

@code
{
	public string toDoInput { get; set; }
	public bool isComplete{ get; set; }
	private const string toDoStorageKey = "SaveToDos";


	List<ToDo> addedItems = new List<ToDo>();

	/// <summary>
	/// for whenever our application starts.
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		var parsedToDos =await GetStoredToDos();
		addedItems = parsedToDos;
	}


  public void AddToDo()
  {
	  ToDo obj=new ToDo();
	  obj.Title=toDoInput;
	  addedItems.Add(obj);
	  toDoInput = "";
	  SaveToDo();//now whenever add to do happenas,save will also happen
  }
  public void RemoveToDo(int i)
  {
		//Console.WriteLine(toDoInput);
		addedItems.Remove(addedItems[i]);
		toDoInput = "";
		SaveToDo();
  }
    public void MarkAsComplete(ToDo todo)
	{
		if(todo.IsComplete)
		{
			todo.IsComplete = false;	
		}
		else
		{
			todo.IsComplete = true;
		}
		SaveToDo();
	}
	/// <summary>
	/// this will store our list of items as string be serializing it.
	/// </summary>
	public void SaveToDo()
	{
		LocalStorage.SetItemAsync(toDoStorageKey, JsonConvert.SerializeObject(addedItems));
	}

	private async Task<List<ToDo>> GetStoredToDos()
	{
		var storedToDos = await LocalStorage.GetItemAsync<string>(toDoStorageKey);//basically we are using the same key that we used to store the data when adding the items.Type of data it expects is string.
		var parsedToDos = JsonConvert.DeserializeObject<List<ToDo>>(storedToDos);//take the object and convert into List.
		return parsedToDos;
	}

	
}



